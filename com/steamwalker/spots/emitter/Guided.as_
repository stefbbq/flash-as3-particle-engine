package com.steamwalker.spots.emitter {	import flash.display.MovieClip;	import flash.geom.Point;		//steamwalker classes	import com.steamwalker.spots.*;	//class	public class Guided extends MovieClip implements IEmitter {		private var _particles:Vector.<Particle>;		public var _vars:Object;		public var _position:Point;		//constructor		public function Guided(vars:Object){			_vars = vars;			_particles = new Vector.<Particle>;			if(!_vars.destination) trace(">spots: guided emitter requires a destination");		}		//		//automatic		public function spawnParticle(){			var particle:Particle = new Particle(_vars.refreshRate);			particle.x = _vars.origin.x;			particle.y = _vars.origin.y;			particle.origin = new Point(particle.x, particle.y);			particle.destination = new Point(_vars.destination.x, _vars.destination.y);			var distance = Math.sqrt(Math.pow(Math.abs(particle.x - _vars.destination.x), 2) + Math.pow(Math.abs(particle.y - _vars.destination.y), 2));			particle.lifespan = distance / _vars.speed;			_particles.push(particle);			addChild(particle);		}		public function updateParticles(){			for (var i = 0; i < _particles.length; i++){				var target = _particles[i];				target.increment();				target.x = target.origin.x + ((target.destination.x - target.origin.x) * target.progress);				target.y = target.origin.y + ((target.destination.y - target.origin.y) * target.progress);				target.alpha = Math.abs(-target.progress + 1);				if(target.progress >= .99){					_particles.splice(i, 1);					removeChild(target);				}			}		}		//		//get and set		public function get particles():Vector.<Particle>{return _particles;}	}}